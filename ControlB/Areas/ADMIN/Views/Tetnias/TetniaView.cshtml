@using Model.BL.Tipos
@model Tetnias

@{
    var viewName = Path.GetFileNameWithoutExtension(VirtualPath);    
    MvcForm form;
}

<div id="@viewName">
    @if (ViewBag.Accion == "Insertar")     {
        form = Ajax.BeginForm("InsTetnia", "Tetnias", new { Area = "ADMIN" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccessGenerico", OnFailure="onFailureGenerico" }, new { enable_placeholder = "" });  }
    else {
        form = Ajax.BeginForm("UpdTetnia", "Tetnias", new { Area = "ADMIN" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "onSuccessGenerico", OnFailure = "onFailureGenerico" }, new { enable_placeholder = "" });
    }
    
    using (form)
    {
        @Html.AntiForgeryToken()
               
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">@ViewBag.Accion Etnia</h4>
        </div>

        <div class="modal-body">
            @Html.HiddenFor(m => m.Estado, new {  Value = 1})            

            <div class="form-group">
                @Html.LabelFor(m => m.Nombre)
                @(Html.TextBoxFor(m => m.Nombre, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Nombre)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Numero)
                @(Html.TextBoxFor(m => m.Numero, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Numero)
            </div>                
                   
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary">Guardar</button>
        </div>
    }

    <!-- Inicialización script de vista -->
    <script>
	@(viewName).init("crear");
    </script>
</div>
