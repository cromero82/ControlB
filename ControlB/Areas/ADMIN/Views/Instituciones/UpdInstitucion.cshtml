@using Model.BL
@model GenInstituciones

@{
    var viewName = Path.GetFileNameWithoutExtension(VirtualPath);
}


<div id="@viewName">
    <!-- Script de la vista modal -->
    <script src="~/Areas/ADMIN/Scripts/Instituciones/UpdInstitucion.js"></script>

    @using (Ajax.BeginForm("UpdInstitucion", "Instituciones", new { Area = "ADMIN" }, new AjaxOptions { HttpMethod = "POST", OnSuccess = viewName + ".onSuccess" }, new { enable_placeholder = "" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">Actualización de datos de establecimiento</h4>
        </div>

        <div class="modal-body">
            <!-- Notificación en caso de error al consultar datos -->
            @if (!ViewData.ModelState.IsValid)
            {
                @Html.ValidationMessage("ErrorCargaDatos")
            }

            @Html.HiddenFor(m => m.Id)
            <div class="form-group">
                @Html.LabelFor(m => m.Nombre)
                @(Html.TextBoxFor(m => m.Nombre, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Nombre)
            </div>            

            @*<div class="form-group">
                @Html.LabelFor(m => m.Direccion)
                @(Html.TextBoxFor(m => m.Direccion, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Direccion)
            </div>*@

            <div class="form-group">
                @Html.LabelFor(m => m.Telefono)
                @(Html.TextBoxFor(m => m.Telefono, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Telefono)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Correo)
                @(Html.TextBoxFor(m => m.Correo, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Correo)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FechaFundacion, new { @class = "control-label" })              

                @(Html.Kendo().DatePickerFor(model => model.FechaFundacion)
                  .Name("FechaFundacion")
                  .Max(DateTime.Now)
                  .Value(Model.FechaFundacion)
                  .HtmlAttributes(new
                  {
                      @type = "",  /*Fix bug: Bound date from model*/
                      @class = "SoloFecha",
                      Style = "width:100%",
                      @maxlength = "10",
                      @placeholder = "DD/MM/AAAA"
                  }))              
                  @Html.ValidationMessageFor(model => model.FechaFundacion)
                
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Rector)
                @(Html.TextBoxFor(m => m.Rector, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.Rector)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.CodigoDane)
                @(Html.TextBoxFor(m => m.CodigoDane, new { @class = "form-control", autocomplete = "off" }))
                @Html.ValidationMessageFor(m => m.CodigoDane)
            </div>
            
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary">Guardar</button>
        </div>
    }

    <!-- Inicialización script de vista -->
    <script>
	@(viewName).init();
    </script>
</div>
